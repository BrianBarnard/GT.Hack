{
  "swagger" : "2.0",
  "info" : {
    "description" : "Provides core services for NEP",
    "version" : "3.2.0-GA",
    "title" : "core",
    "contact" : {
      "name" : "NCR Corporation"
    },
    "license" : {
      "name" : "Copyright 2017 NCR Corporation.  All rights reserved.",
      "url" : "http://www.ncr.com/license"
    }
  },
  "basePath" : "/provisioning",
  "tags" : [ {
    "name" : "/authorization"
  }, {
    "name" : "/configuration-sets",
    "description" : "Provides management for configuration sets, configuration fields and default configuration values."
  }, {
    "name" : "/configuration-settings",
    "description" : "Defines the service APIs for storing/retrieving configuration setting values."
  }, {
    "name" : "/enterprise-settings",
    "description" : "Provides operations to retrieve and set values for enterprise unit settings."
  }, {
    "name" : "/enterprise-types",
    "description" : "Provides method to manage enterprise types."
  }, {
    "name" : "/enterprise-unit-grants",
    "description" : "Provides operations to grant/revoke and look up enterprise unit grants for supported entities (users)."
  }, {
    "name" : "/enterprise-units",
    "description" : "Provides methods to manage enterprise units and organize various taxonomies, such as organizational structure, etc."
  }, {
    "name" : "/group-memberships",
    "description" : "Service for managing memberships of users in a Group."
  }, {
    "name" : "/groups",
    "description" : "Service for managing Groups. A Group is an Identity which represents a set of Identities."
  }, {
    "name" : "/keys",
    "description" : "Provides service to expose the public key to applications via a standard HTTP request that can be made through the\r\n gateway. The public key will be used for verification of JWT tokens.  No authentication required."
  }, {
    "name" : "/organizations",
    "description" : "Service layer interface for provisioning"
  }, {
    "name" : "/role-grants",
    "description" : "Service for granting and revoking of privileges represented by Roles. Users, groups, and organizations may be granted\r\n these privileges."
  }, {
    "name" : "/roles",
    "description" : "Service for managing Roles."
  }, {
    "name" : "/security-access-keys",
    "description" : "Manages access keys (consisting of a shared/secret key pair) associated with NEP identities. This service is\r\n multi-tenant and must enforce tenant access control validation."
  }, {
    "name" : "/security-user-passwords"
  }, {
    "name" : "/user-profiles",
    "description" : "Service for managing user profiles. This service is specifically designed for allowing the currently authenticated\r\n user access to their own profile information."
  }, {
    "name" : "/user-settings",
    "description" : "Defines the service APIs for storing/retrieving user setting values. An appropriate configuration set must exist\r\n before user settings can be created."
  }, {
    "name" : "/user-shared-secrets"
  }, {
    "name" : "/users",
    "description" : "Service for managing Users. User is an Identity which has email and password attributes."
  } ],
  "paths" : {
    "/authorization" : {
      "post" : {
        "tags" : [ "/authorization" ],
        "summary" : "Authorization end-point provides a way to exchange token for mapped identities.",
        "operationId" : "authorize",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AuthorizationProviderRequest"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "security token data representing the access token"
          }
        }
      }
    },
    "/configuration-sets" : {
      "post" : {
        "tags" : [ "/configuration-sets" ],
        "summary" : "Creates a configuration set. It's possible to create a configuration set with no fields and use the",
        "operationId" : "create",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "the configuration set to create",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateConfigurationSetRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the newly created configuration set",
            "schema" : {
              "$ref" : "#/definitions/ConfigurationSetViewData"
            },
            "headers" : { }
          }
        }
      },
      "put" : {
        "tags" : [ "/configuration-sets" ],
        "summary" : "Updates non-field data on the configuration set",
        "operationId" : "update",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "the configuration set to update",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdateConfigurationSetRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the updated configuration set",
            "schema" : {
              "$ref" : "#/definitions/ConfigurationSetViewData"
            },
            "headers" : { }
          }
        }
      }
    },
    "/configuration-sets/fields" : {
      "post" : {
        "tags" : [ "/configuration-sets" ],
        "summary" : "Creates a field on the configuration set.",
        "operationId" : "addField",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "the request with a configuration field to create",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AddConfigurationFieldRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "a configuration set with the new field added",
            "schema" : {
              "$ref" : "#/definitions/ConfigurationSetViewData"
            },
            "headers" : { }
          }
        }
      },
      "put" : {
        "tags" : [ "/configuration-sets" ],
        "summary" : "Updates a field on a configuration set where the set is not in use.",
        "operationId" : "updateField",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "the request with a configuration field to update",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdateConfigurationFieldRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "a configuration set with the updated field info",
            "schema" : {
              "$ref" : "#/definitions/ConfigurationSetViewData"
            },
            "headers" : { }
          }
        }
      }
    },
    "/configuration-sets/find-by-name" : {
      "get" : {
        "tags" : [ "/configuration-sets" ],
        "summary" : "Retrieves all defined configuration sets matching the provided name pattern. If there are no results in the page\r\n specified, an empty page will be returned.",
        "operationId" : "findByName",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "query",
          "description" : "the request for the page of results",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "any results in that page",
            "schema" : {
              "$ref" : "#/definitions/FindConfigurationSetResponse"
            },
            "headers" : { }
          }
        }
      }
    },
    "/configuration-sets/{configurationSetId.name}/fields/{name}" : {
      "delete" : {
        "tags" : [ "/configuration-sets" ],
        "summary" : "Removes a field from a configuration set where the set is not in use.",
        "operationId" : "removeField",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "the request with a configuration field to remove",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "a configuration set with the field removed",
            "schema" : {
              "$ref" : "#/definitions/ConfigurationSetViewData"
            },
            "headers" : { }
          }
        }
      }
    },
    "/configuration-sets/{name}" : {
      "get" : {
        "tags" : [ "/configuration-sets" ],
        "summary" : "Retrieves a configuration set by name.",
        "operationId" : "get",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "a request with the name of the configuration set",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "the configuration set",
            "schema" : {
              "$ref" : "#/definitions/ConfigurationSetViewData"
            },
            "headers" : { }
          }
        }
      },
      "delete" : {
        "tags" : [ "/configuration-sets" ],
        "summary" : "Deletes a configuration set that is not in use.",
        "operationId" : "delete",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "the configuration set to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : { }
        }
      }
    },
    "/configuration-settings" : {
      "put" : {
        "tags" : [ "/configuration-settings" ],
        "summary" : "Sets the values on the configuration settings provided.",
        "operationId" : "set",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "request for setting configuration values",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SetConfigurationSettingsRequest"
          }
        } ],
        "responses" : {
          "default" : { }
        }
      }
    },
    "/configuration-settings/{configurationSetId.name}" : {
      "get" : {
        "tags" : [ "/configuration-settings" ],
        "summary" : "Retrieves configuration settings from a configuration set.",
        "operationId" : "get",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "request for retrieving a configuration setting",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Configuration setting data; never null",
            "schema" : {
              "$ref" : "#/definitions/ConfigurationSettingsData"
            },
            "headers" : { }
          }
        }
      }
    },
    "/enterprise-settings" : {
      "put" : {
        "tags" : [ "/enterprise-settings" ],
        "summary" : "Sets the values on the collection of provided enterprise settings.",
        "operationId" : "set",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "request for setting enterprise unit configuration values",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SetEnterpriseSettingsRequest"
          }
        } ],
        "responses" : {
          "default" : { }
        }
      }
    },
    "/enterprise-settings/{enterpriseUnitId}/{configurationSetId.name}" : {
      "get" : {
        "tags" : [ "/enterprise-settings" ],
        "summary" : "Retrieves enterprise settings by the provided enterprise unit identifier.",
        "operationId" : "get",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "request containing the enterprise unit identifier",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Enterprise settings data. Never null.",
            "schema" : {
              "$ref" : "#/definitions/EnterpriseSettingsData"
            },
            "headers" : { }
          }
        }
      }
    },
    "/enterprise-types" : {
      "get" : {
        "tags" : [ "/enterprise-types" ],
        "summary" : "Retrieves all enterprise types.",
        "operationId" : "findAll",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Collection of the",
            "schema" : {
              "$ref" : "#/definitions/EnterpriseTypeBasicDataListResponse"
            },
            "headers" : { }
          }
        }
      },
      "post" : {
        "tags" : [ "/enterprise-types" ],
        "summary" : "Creates the new enterprise type specified in the request.",
        "operationId" : "create",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "request object containing enterprise type data",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateEnterpriseTypeRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "newly created enterprise type",
            "schema" : {
              "$ref" : "#/definitions/EnterpriseTypeData"
            },
            "headers" : { }
          }
        }
      },
      "put" : {
        "tags" : [ "/enterprise-types" ],
        "summary" : "Updates the specified enterprise type with data provided in the request.",
        "operationId" : "update",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "request object containing fields that must be updated",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdateEnterpriseTypeRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the updated enterprise type object",
            "schema" : {
              "$ref" : "#/definitions/EnterpriseTypeData"
            },
            "headers" : { }
          }
        }
      }
    },
    "/enterprise-types/{name}" : {
      "get" : {
        "tags" : [ "/enterprise-types" ],
        "summary" : "Retrieves the enterprise type details matching the name specified in the request.",
        "operationId" : "get",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "request object specifying the enterprise type to retrieve",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Enterprise type object",
            "schema" : {
              "$ref" : "#/definitions/EnterpriseTypeData"
            },
            "headers" : { }
          }
        }
      },
      "delete" : {
        "tags" : [ "/enterprise-types" ],
        "summary" : "Deletes the specified enterprise type.",
        "operationId" : "delete",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "request to delete an enterprise type",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : { }
        }
      }
    },
    "/enterprise-unit-authorization" : {
      "put" : {
        "operationId" : "authorizeMultiple",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AuthorizeMultipleUnitsRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AuthorizeMulitpleUnitsResponse"
            },
            "headers" : { }
          }
        }
      }
    },
    "/enterprise-unit-authorization/{enterpriseUnitId}" : {
      "get" : {
        "operationId" : "authorize",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "enterpriseUnitId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "roleName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/enterprise-unit-grants" : {
      "get" : {
        "tags" : [ "/enterprise-unit-grants" ],
        "summary" : "Retrieves all explicit (as opposed to effective) user grants for the enterprise unit specified in the request.",
        "operationId" : "findUserGrantsByUnit",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "query",
          "description" : "request specifying the enterprise unit for which grants must be retrieved",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "paged collection of user grants for the specified enterprise unit",
            "schema" : {
              "$ref" : "#/definitions/FindUserGrantsResponse"
            },
            "headers" : { }
          }
        }
      },
      "post" : {
        "tags" : [ "/enterprise-unit-grants" ],
        "summary" : "Grants enterprise unit access to the user specified in the request.",
        "operationId" : "grantToUser",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "request specifying the user and the enterprise unit",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GrantUnitToUserRequest"
          }
        } ],
        "responses" : {
          "default" : { }
        }
      }
    },
    "/enterprise-unit-grants/{username}" : {
      "get" : {
        "tags" : [ "/enterprise-unit-grants" ],
        "summary" : "Returns all granted enterprise units for the specified grantee.",
        "operationId" : "getGrantedUnitsForUser",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "request object containing the user for which granted enterprise units must be\r\n retrieved",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "collection of enterprise unit objects",
            "schema" : {
              "$ref" : "#/definitions/EnterpriseUnitBasicDataListResponse"
            },
            "headers" : { }
          }
        }
      }
    },
    "/enterprise-unit-grants/{username}/effective-grants" : {
      "get" : {
        "tags" : [ "/enterprise-unit-grants" ],
        "summary" : "Returns all enterprise units accessible to the user specified in the request.",
        "operationId" : "getEffectiveUnitsForUser",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "request object specifying the grantee",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "collection of enterprise unit identifiers or empty collection if none found",
            "schema" : {
              "$ref" : "#/definitions/EnterpriseUnitIdDataListResponse"
            },
            "headers" : { }
          }
        }
      }
    },
    "/enterprise-unit-grants/{username}/{enterpriseUnitId}" : {
      "delete" : {
        "tags" : [ "/enterprise-unit-grants" ],
        "summary" : "Revokes access to the specified enterprise unit from user.",
        "operationId" : "revokeFromUser",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "request containing the user grant that should be revoked",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : { }
        }
      }
    },
    "/enterprise-units" : {
      "post" : {
        "tags" : [ "/enterprise-units" ],
        "summary" : "Creates an enterprise unit and assigns it to the parent specified in the request.",
        "operationId" : "create",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "request object containing fields for enterprise unit",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateEnterpriseUnitRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the new enterprise unit information, including a generated identifier if none was provided",
            "schema" : {
              "$ref" : "#/definitions/EnterpriseUnitData"
            },
            "headers" : { }
          }
        }
      },
      "put" : {
        "tags" : [ "/enterprise-units" ],
        "summary" : "Updates the enterprise unit. The unit could be moved as the result of the update if parentId field is modified.",
        "operationId" : "update",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "specifying the new fields for the enterprise unit",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdateEnterpriseUnitRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the modified enterprise unit data; never null",
            "schema" : {
              "$ref" : "#/definitions/EnterpriseUnitData"
            },
            "headers" : { }
          }
        }
      }
    },
    "/enterprise-units/find-by-name" : {
      "get" : {
        "tags" : [ "/enterprise-units" ],
        "summary" : "Finds enterprise units by the provided name pattern.",
        "operationId" : "findByName",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "query",
          "description" : "request containing the name pattern",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "a paged collection of enterprise unit objects",
            "schema" : {
              "$ref" : "#/definitions/FindEnterpriseUnitsResponse"
            },
            "headers" : { }
          }
        }
      }
    },
    "/enterprise-units/find-by-parent" : {
      "get" : {
        "tags" : [ "/enterprise-units" ],
        "summary" : "Finds active enterprise units by parent.",
        "operationId" : "findByParent",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "query",
          "description" : "request object containing the parent unit id to search by",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "a paged collection of enterprise unit objects",
            "schema" : {
              "$ref" : "#/definitions/FindEnterpriseUnitsResponse"
            },
            "headers" : { }
          }
        }
      }
    },
    "/enterprise-units/find-candidate-parents" : {
      "get" : {
        "tags" : [ "/enterprise-units" ],
        "summary" : "Finds active enterprise units that may serve as valid candidates if this enterprise unit specified in the request\r\n is to be moved to a different parent unit. This operation is mostly intended to support flows when user must be\r\n presented with a selection of valid candidate parent units that the specified unit must be moved to. This method\r\n will filter out any descendant units, since they cannot be used as the destination to move the enterprise unit\r\n to.",
        "operationId" : "findCandidateParents",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "query",
          "description" : "request containing enterprise unit that is about to be moved",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "a paged collection of enterprise units where the specified unit could be moved",
            "schema" : {
              "$ref" : "#/definitions/FindEnterpriseUnitsResponse"
            },
            "headers" : { }
          }
        }
      }
    },
    "/enterprise-units/find-descendants" : {
      "get" : {
        "tags" : [ "/enterprise-units" ],
        "summary" : "Finds all active descendant nodes that are accessible from this node.",
        "operationId" : "findDescendants",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "query",
          "description" : "request object containing the enterprise unit to search by",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "a paged collection of enterprise unit identifiers",
            "schema" : {
              "$ref" : "#/definitions/FindEnterpriseUnitIdsResponse"
            },
            "headers" : { }
          }
        }
      }
    },
    "/enterprise-units/reference-id/{referenceId}" : {
      "get" : {
        "tags" : [ "/enterprise-units" ],
        "operationId" : "getByReferenceId",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/EnterpriseUnitData"
            },
            "headers" : { }
          }
        }
      }
    },
    "/enterprise-units/{enterpriseUnitId}" : {
      "get" : {
        "tags" : [ "/enterprise-units" ],
        "summary" : "Retrieves enterprise unit data by the provided identifier.",
        "operationId" : "get",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "request containing the enterprise unit identifier",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "the requested enterprise unit data; never null",
            "schema" : {
              "$ref" : "#/definitions/EnterpriseUnitData"
            },
            "headers" : { }
          }
        }
      }
    },
    "/enterprise-units/{enterpriseUnitId}/ancestors" : {
      "get" : {
        "tags" : [ "/enterprise-units" ],
        "summary" : "Finds all ancestors for the enterprise unit specified in the request.",
        "operationId" : "findAncestors",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "request object containing the enterprise unit to search by",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "any ancestors of the provided enterprise unit; never null",
            "schema" : {
              "$ref" : "#/definitions/EnterpriseUnitReadDataListResponse"
            },
            "headers" : { }
          }
        }
      }
    },
    "/group-memberships" : {
      "post" : {
        "tags" : [ "/group-memberships" ],
        "summary" : "Add one or more users to the specified group.",
        "operationId" : "addMembers",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "the users to be added to the specified group",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AddMembersRequest"
          }
        } ],
        "responses" : {
          "default" : { }
        }
      }
    },
    "/group-memberships/groups" : {
      "get" : {
        "tags" : [ "/group-memberships" ],
        "summary" : "Retrieve the groups of which the user is a member.",
        "operationId" : "getMembershipsForUser",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "query",
          "description" : "contains user information whose memberships are to be retrieved",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "groups the user is in",
            "schema" : {
              "$ref" : "#/definitions/GroupMembershipsResponse"
            },
            "headers" : { }
          }
        }
      }
    },
    "/group-memberships/remove" : {
      "post" : {
        "tags" : [ "/group-memberships" ],
        "summary" : "Remove membership of users from the specified group.",
        "operationId" : "removeMembers",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "users to be removed from group",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RemoveMembersRequest"
          }
        } ],
        "responses" : {
          "default" : { }
        }
      }
    },
    "/group-memberships/users" : {
      "get" : {
        "tags" : [ "/group-memberships" ],
        "summary" : "Retrieve the users who are currently members of the specified group.",
        "operationId" : "getMembers",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "query",
          "description" : "members for the specified group to be retrieved",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "all member users",
            "schema" : {
              "$ref" : "#/definitions/GroupMembersResponse"
            },
            "headers" : { }
          }
        }
      }
    },
    "/groups" : {
      "get" : {
        "tags" : [ "/groups" ],
        "summary" : "Find groups specified by search criteria.",
        "operationId" : "findByCriteria",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "query",
          "description" : "search criteria",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "list of attribute search result objects",
            "schema" : {
              "$ref" : "#/definitions/FindGroupsResponse"
            },
            "headers" : { }
          }
        }
      },
      "post" : {
        "tags" : [ "/groups" ],
        "summary" : "Create specified group.",
        "operationId" : "create",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "the createGroupRequest",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateGroupRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "created group",
            "schema" : {
              "$ref" : "#/definitions/GroupData"
            },
            "headers" : { }
          }
        }
      },
      "put" : {
        "tags" : [ "/groups" ],
        "summary" : "Update specified group.",
        "operationId" : "update",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "the updateGroupRequest",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdateGroupRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the updated group",
            "schema" : {
              "$ref" : "#/definitions/GroupData"
            },
            "headers" : { }
          }
        }
      }
    },
    "/groups/{groupName}" : {
      "get" : {
        "tags" : [ "/groups" ],
        "summary" : "Get specified group.",
        "operationId" : "get",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "containing the group identifiers.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "group object graph.",
            "schema" : {
              "$ref" : "#/definitions/GroupData"
            },
            "headers" : { }
          }
        }
      },
      "delete" : {
        "tags" : [ "/groups" ],
        "summary" : "Delete specified group. Only groups without members can be deleted.",
        "operationId" : "delete",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "object containing the group to be deleted",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : { }
        }
      }
    },
    "/keys" : {
      "get" : {
        "tags" : [ "/keys" ],
        "summary" : "Retrieves resource containing the Public",
        "operationId" : "getJwtPublicKey",
        "produces" : [ "application/octet-stream" ],
        "parameters" : [ {
          "name" : "If-None-Match",
          "in" : "header",
          "description" : "request object with possible",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Response with public key value in binary representation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "format" : "byte"
              }
            },
            "headers" : { }
          }
        }
      }
    },
    "/organizations" : {
      "post" : {
        "tags" : [ "/organizations" ],
        "summary" : "Creates an organization.",
        "operationId" : "create",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "the organization to create",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateOrganizationRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the newly created organization",
            "schema" : {
              "$ref" : "#/definitions/OrganizationData"
            },
            "headers" : { }
          }
        }
      },
      "put" : {
        "tags" : [ "/organizations" ],
        "summary" : "Updates an organization on the platform.",
        "operationId" : "update",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "the organization to update",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdateOrganizationRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the updated organization",
            "schema" : {
              "$ref" : "#/definitions/OrganizationData"
            },
            "headers" : { }
          }
        }
      }
    },
    "/organizations/find-by-parent" : {
      "get" : {
        "tags" : [ "/organizations" ],
        "summary" : "Retrieves a list of organizations that are children of the provided organization. Depending on the details\r\n provided in the request, immediate children or all descendants (not just immediate children) will be retrieved.",
        "operationId" : "findByParent",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "query",
          "description" : "the parent organization information",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "a list of organizations",
            "schema" : {
              "$ref" : "#/definitions/FindOrganizationsResponse"
            },
            "headers" : { }
          }
        }
      }
    },
    "/organizations/{organizationName}" : {
      "get" : {
        "tags" : [ "/organizations" ],
        "summary" : "Retrieves an organization by name.",
        "operationId" : "get",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "the name of the organization to retrieve",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "the organization with the given name",
            "schema" : {
              "$ref" : "#/definitions/OrganizationData"
            },
            "headers" : { }
          }
        }
      },
      "delete" : {
        "tags" : [ "/organizations" ],
        "summary" : "Deletes an organization from the platform. An organization can not be deleted if it is the root organization or\r\n the organization in which the user performing the delete resides.",
        "operationId" : "delete",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "the organization to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : { }
        }
      }
    },
    "/organizations/{organizationName}/resolve" : {
      "get" : {
        "tags" : [ "/organizations" ],
        "summary" : "Retrieves the fully qualified organization name of the organization with the given short name.",
        "operationId" : "getOrganizationName",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "the name of the organization to retrieve",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "the name of the organization with the given short name",
            "schema" : {
              "$ref" : "#/definitions/OrganizationIdData"
            },
            "headers" : { }
          }
        }
      }
    },
    "/role-grants/group-grants" : {
      "post" : {
        "tags" : [ "/role-grants" ],
        "summary" : "Grants a set of groups the privileges represented by the specified roles.",
        "operationId" : "grantToGroups",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "the groups to be added to the roles",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GrantRolesToGroupsRequest"
          }
        } ],
        "responses" : {
          "default" : { }
        }
      }
    },
    "/role-grants/group-grants/groups" : {
      "get" : {
        "tags" : [ "/role-grants" ],
        "summary" : "Retrieves groups that have been directly granted the specified role. This does not include groups that may be\r\n effectively granted the role through an implied role relationship.",
        "operationId" : "findGroupsByRole",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "query",
          "description" : "the role to search for grants of",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "groups that have been granted the role",
            "schema" : {
              "$ref" : "#/definitions/FindGroupIdsResponse"
            },
            "headers" : { }
          }
        }
      }
    },
    "/role-grants/group-grants/revoke" : {
      "post" : {
        "tags" : [ "/role-grants" ],
        "summary" : "Revokes the privileges represented by the specified roles from a set of groups.",
        "operationId" : "revokeFromGroups",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "the roles to revoke from the groups",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RevokeRolesFromGroupsRequest"
          }
        } ],
        "responses" : {
          "default" : { }
        }
      }
    },
    "/role-grants/group-grants/{groupName}/effective-roles" : {
      "get" : {
        "tags" : [ "/role-grants" ],
        "summary" : "Retrieves the roles implicitly granted to a group (for example, via group membership).",
        "operationId" : "getEffectiveRolesForGroup",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "the group for whom implicit privileges will be retrieved",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "the granted roles; if no roles have been granted; the resulting list will be empty",
            "schema" : {
              "$ref" : "#/definitions/RoleIdListResponse"
            },
            "headers" : { }
          }
        }
      }
    },
    "/role-grants/group-grants/{groupName}/granted-roles" : {
      "get" : {
        "tags" : [ "/role-grants" ],
        "summary" : "Retrieves the roles explicitly granted to a group.",
        "operationId" : "getGrantedRolesForGroup",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "the group for whom grants will be retrieved",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "the granted roles; if no roles have been explicitly granted; the resulting list will be empty",
            "schema" : {
              "$ref" : "#/definitions/RoleBasicDataListResponse"
            },
            "headers" : { }
          }
        }
      }
    },
    "/role-grants/organization-grants" : {
      "post" : {
        "tags" : [ "/role-grants" ],
        "summary" : "Grants to an organization the privileges represented by the specified set of roles. These roles now become\r\n grantable by administrators within the organization to users and groups within the organization.",
        "operationId" : "grantToOrganization",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "the identities to be added to role",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GrantRolesToOrganizationRequest"
          }
        } ],
        "responses" : {
          "default" : { }
        }
      }
    },
    "/role-grants/organization-grants/effective-roles" : {
      "get" : {
        "tags" : [ "/role-grants" ],
        "summary" : "Retrieves the roles implicitly grantable by an organization.",
        "operationId" : "getEffectiveRolesForOrganization",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "query",
          "description" : "the role for whom implicit privileges will be retrieved",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "the granted roles; if no roles have been granted; the resulting list will be empty",
            "schema" : {
              "$ref" : "#/definitions/RoleIdListResponse"
            },
            "headers" : { }
          }
        }
      }
    },
    "/role-grants/organization-grants/granted-roles" : {
      "get" : {
        "tags" : [ "/role-grants" ],
        "summary" : "Retrieves the roles have been explicitly granted to an organization.",
        "operationId" : "getGrantedRolesForOrganization",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "query",
          "description" : "the organization for which to list granted roles",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "the granted roles; if no roles have been explicitly granted the resulting list will be empty",
            "schema" : {
              "$ref" : "#/definitions/RoleBasicDataListResponse"
            },
            "headers" : { }
          }
        }
      }
    },
    "/role-grants/organization-grants/revoke" : {
      "post" : {
        "tags" : [ "/role-grants" ],
        "summary" : "Revokes the provided roles from the organization. These roles will no longer be grantable by administrators\r\n within the organization to users and groups within the organization. Any users or groups that have been granted\r\n the roles will still retain those privileges.",
        "operationId" : "revokeFromOrganization",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "the roles to revoke from the organization",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RevokeRolesFromOrganizationRequest"
          }
        } ],
        "responses" : {
          "default" : { }
        }
      }
    },
    "/role-grants/user-grants" : {
      "post" : {
        "tags" : [ "/role-grants" ],
        "summary" : "Grants a set of users the privileges represented by the specified roles.",
        "operationId" : "grantToUsers",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "the identities to be added to the roles",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GrantRolesToUsersRequest"
          }
        } ],
        "responses" : {
          "default" : { }
        }
      }
    },
    "/role-grants/user-grants/revoke" : {
      "post" : {
        "tags" : [ "/role-grants" ],
        "summary" : "Revokes the privileges represented by the specified roles from a set of users.",
        "operationId" : "revokeFromUsers",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "the roles to revoke from the users",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RevokeRolesFromUsersRequest"
          }
        } ],
        "responses" : {
          "default" : { }
        }
      }
    },
    "/role-grants/user-grants/self/effective-roles" : {
      "get" : {
        "tags" : [ "/role-grants" ],
        "summary" : "Retrieves the roles implicitly granted to the current user (for example, via group membership).",
        "operationId" : "getEffectiveRolesForAuthenticatedUser",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "the granted roles; if no roles have been granted; the resulting list will be empty",
            "schema" : {
              "$ref" : "#/definitions/RoleIdListResponse"
            },
            "headers" : { }
          }
        }
      }
    },
    "/role-grants/user-grants/users" : {
      "get" : {
        "tags" : [ "/role-grants" ],
        "summary" : "Retrieves users that have been implicitly granted the specified role. This includes users that may be effectively\r\n granted the role through an implied role relationship.",
        "operationId" : "findUsersByRole",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "query",
          "description" : "the role to search for grants of",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "users that have been implicitly granted the role",
            "schema" : {
              "$ref" : "#/definitions/FindUserIdsResponse"
            },
            "headers" : { }
          }
        }
      }
    },
    "/role-grants/user-grants/{username}/effective-roles" : {
      "get" : {
        "tags" : [ "/role-grants" ],
        "summary" : "Retrieves the roles implicitly granted to a user (for example, via group membership).",
        "operationId" : "getEffectiveRolesForUser",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "the user for whom implicit privileges will be retrieved",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "the granted roles; if no roles have been granted; the resulting list will be empty",
            "schema" : {
              "$ref" : "#/definitions/RoleIdListResponse"
            },
            "headers" : { }
          }
        }
      }
    },
    "/role-grants/user-grants/{username}/granted-roles" : {
      "get" : {
        "tags" : [ "/role-grants" ],
        "summary" : "Retrieves the roles explicitly granted to a user.",
        "operationId" : "getGrantedRolesForUser",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "the user for whom grants will be retrieved",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "the granted roles; if no roles have been explicitly granted; the resulting list will be empty",
            "schema" : {
              "$ref" : "#/definitions/RoleBasicDataListResponse"
            },
            "headers" : { }
          }
        }
      }
    },
    "/roles" : {
      "get" : {
        "tags" : [ "/roles" ],
        "summary" : "Finds roles specified by search criteria.",
        "operationId" : "findByCriteria",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "query",
          "description" : "search criteria",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "the result object containing the roles matching the given criteria",
            "schema" : {
              "$ref" : "#/definitions/FindRolesResponse"
            },
            "headers" : { }
          }
        }
      },
      "post" : {
        "tags" : [ "/roles" ],
        "summary" : "Creates a role with the data specified in the request.",
        "operationId" : "create",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "the request containing the data necessary to create a role",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateRoleRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the newly created role",
            "schema" : {
              "$ref" : "#/definitions/RoleData"
            },
            "headers" : { }
          }
        }
      },
      "put" : {
        "tags" : [ "/roles" ],
        "summary" : "Updates the specified role with the new data specified in the request.",
        "operationId" : "update",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "the request containing the role data to update",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdateRoleRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the updated role",
            "schema" : {
              "$ref" : "#/definitions/RoleData"
            },
            "headers" : { }
          }
        }
      }
    },
    "/roles/find-by-implied-role" : {
      "get" : {
        "tags" : [ "/roles" ],
        "summary" : "Find roles that have an implied role matching the criteria specified in the request.",
        "operationId" : "findByImpliedRole",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "query",
          "description" : "search criteria",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "the result object containing the roles matching the given criteria",
            "schema" : {
              "$ref" : "#/definitions/RoleIdListResponse"
            },
            "headers" : { }
          }
        }
      }
    },
    "/roles/role-graph" : {
      "post" : {
        "tags" : [ "/roles" ],
        "summary" : "Saves the role graph as specified in the request.",
        "operationId" : "saveFullRoleGraph",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "request containing full role graph to be persisted",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SaveFullRoleGraphRequest"
          }
        } ],
        "responses" : {
          "default" : { }
        }
      }
    },
    "/roles/{roleName}" : {
      "get" : {
        "tags" : [ "/roles" ],
        "summary" : "Retrieves the role with data specified in the request.",
        "operationId" : "get",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "the request containing the data necessary to retrieve the role",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "the role matching the criteria specified in the request",
            "schema" : {
              "$ref" : "#/definitions/RoleData"
            },
            "headers" : { }
          }
        }
      },
      "delete" : {
        "tags" : [ "/roles" ],
        "summary" : "Deletes the specified role. A role cannot be deleted if it is still granted to users and/or groups, or if it is\r\n implied by another role.",
        "operationId" : "delete",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "the request containing the data necessary to delete a role",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : { }
        }
      }
    },
    "/roles/{roleName}/role-graph" : {
      "get" : {
        "tags" : [ "/roles" ],
        "summary" : "Retrieve the full role graph for the role specified in the request.",
        "operationId" : "getFullRoleGraph",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "the request containing the role to retrieve the graph for",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "the full role graph for the role specified",
            "schema" : {
              "$ref" : "#/definitions/FullRoleData"
            },
            "headers" : { }
          }
        }
      }
    },
    "/security-access-keys" : {
      "get" : {
        "tags" : [ "/security-access-keys" ],
        "summary" : "Obtains access keys based on the provided search criteria.",
        "operationId" : "findByCriteria",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "query",
          "description" : "contains the search criteria",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "a page of access key information; will be empty if no keys match, or if the page reference is outside the\r\n matching results",
            "schema" : {
              "$ref" : "#/definitions/FindAccessKeysResponse"
            },
            "headers" : { }
          }
        }
      },
      "post" : {
        "tags" : [ "/security-access-keys" ],
        "summary" : "Creates an access key for the specified user.",
        "operationId" : "create",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Request object that identifies the user for which the access key generation is requested",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateAccessKeyRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "a complete access key with both shared and secret keys; the invoker is expected to securely store the\r\n secret key locally.",
            "schema" : {
              "$ref" : "#/definitions/AccessKeyData"
            },
            "headers" : { }
          }
        }
      }
    },
    "/security-access-keys/{sharedKey}" : {
      "get" : {
        "tags" : [ "/security-access-keys" ],
        "summary" : "Retrieves the access key data associated with a shared key.",
        "operationId" : "get",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "identifies the access key to retrieve",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "access key basic data",
            "schema" : {
              "$ref" : "#/definitions/AccessKeyBasicData"
            },
            "headers" : { }
          }
        }
      }
    },
    "/security-access-keys/{sharedKey}/deactivate" : {
      "put" : {
        "tags" : [ "/security-access-keys" ],
        "summary" : "Deactivates the specified access key. A deactivated access key should fail to authenticate with an appropriate\r\n error.",
        "operationId" : "deactivate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "identifies the access key to deactivate",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : { }
        }
      }
    },
    "/security-user-passwords/validate" : {
      "put" : {
        "tags" : [ "/security-user-passwords" ],
        "summary" : "Initiates a request to validate a potential password before saving it for a particular user account.",
        "operationId" : "validatePassword",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "the request to validate the password",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ValidatePasswordRequest"
          }
        } ],
        "responses" : {
          "default" : { }
        }
      }
    },
    "/security-user-passwords/{username}" : {
      "put" : {
        "tags" : [ "/security-user-passwords" ],
        "summary" : "Sets password for the specified user.",
        "operationId" : "savePassword",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "user for which password must be set",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "for password change",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SaveUserPasswordRequest"
          }
        } ],
        "responses" : {
          "default" : { }
        }
      }
    },
    "/security-user-passwords/{username}/disable" : {
      "put" : {
        "tags" : [ "/security-user-passwords" ],
        "summary" : "Disables user password. Authentication using password credentials should not be possible if the outcome of this\r\n call is success. Idempotent, will not fail if password is already disabled.",
        "operationId" : "disable",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "object specifying the user",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : { }
        }
      }
    },
    "/security-user-passwords/{username}/enable" : {
      "put" : {
        "tags" : [ "/security-user-passwords" ],
        "summary" : "Enables user password. Authentication using password credentials should succeed if the outcome of this call is\r\n success (provided valid password is supplied). Idempotent, will not fail if password is already enabled.",
        "operationId" : "enable",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "object specifying the user",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : { }
        }
      }
    },
    "/security-user-passwords/{username}/force-password-change" : {
      "put" : {
        "tags" : [ "/security-user-passwords" ],
        "summary" : "Forces specified user to change password upon next login.",
        "operationId" : "forceChange",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "the ID of the user to force a password change for",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : { }
        }
      }
    },
    "/security-user-passwords/{username}/recover" : {
      "post" : {
        "tags" : [ "/security-user-passwords" ],
        "summary" : "Initiates a request to recover a user's password after it is say lost or forgotten.",
        "operationId" : "recoverPassword",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "user for each the password must be recovered",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "the request to reset a password for a user",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RecoverPasswordRequest"
          }
        } ],
        "responses" : {
          "default" : { }
        }
      }
    },
    "/user-profiles" : {
      "get" : {
        "tags" : [ "/user-profiles" ],
        "summary" : "Retrieves the profile data of the user that is currently authenticated.",
        "operationId" : "get",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "the user profile data",
            "schema" : {
              "$ref" : "#/definitions/UserData"
            },
            "headers" : { }
          }
        }
      }
    },
    "/user-profiles/change-password" : {
      "put" : {
        "tags" : [ "/user-profiles" ],
        "summary" : "Changes the password of the user that is currently authenticated.",
        "operationId" : "changePassword",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "the object containing the user's new password",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ChangePasswordRequest"
          }
        } ],
        "responses" : {
          "default" : { }
        }
      }
    },
    "/user-settings" : {
      "put" : {
        "tags" : [ "/user-settings" ],
        "summary" : "Sets the values on the collection of a given user settings. The caller must have the granted authority to set\r\n another user's settings. This assumes that the configuration has already been created and the request is for\r\n setting configuration values only. To create a new configuration set see",
        "operationId" : "set",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "provides the user and configuration settings data",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SetUserSettingsRequest"
          }
        } ],
        "responses" : {
          "default" : { }
        }
      }
    },
    "/user-settings/self" : {
      "put" : {
        "tags" : [ "/user-settings" ],
        "summary" : "Sets the values on the collection of caller user settings. The caller can only set his/her own settings. This\r\n assumes that the configuration has already been created and the request is for setting configuration values only.\r\n To create a new configuration set see",
        "operationId" : "setForAuthenticatedUser",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "provides the configuration settings data",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SetAuthenticatedUserSettingsRequest"
          }
        } ],
        "responses" : {
          "default" : { }
        }
      }
    },
    "/user-settings/self/{configurationSetId.name}" : {
      "get" : {
        "tags" : [ "/user-settings" ],
        "summary" : "Retrieves caller user settings. Does not allow access to other user settings.",
        "operationId" : "getForAuthenticatedUser",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "identifies the settings required",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "user settings data (never",
            "schema" : {
              "$ref" : "#/definitions/UserSettingsData"
            },
            "headers" : { }
          }
        }
      }
    },
    "/user-settings/{username}/{configurationSetId.name}" : {
      "get" : {
        "tags" : [ "/user-settings" ],
        "summary" : "Retrieves user settings for a given user.",
        "operationId" : "get",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "identifies the user and settings required",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "user settings data (never",
            "schema" : {
              "$ref" : "#/definitions/UserSettingsData"
            },
            "headers" : { }
          }
        }
      }
    },
    "/user-shared-secrets/{username}" : {
      "get" : {
        "tags" : [ "/user-shared-secrets" ],
        "summary" : "Gets basic information about the secret key.",
        "operationId" : "get",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "object specifying the user",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "basic data object containing information about the secret key. For security reasons, the actual key is\r\n not provided",
            "schema" : {
              "$ref" : "#/definitions/SharedSecretBasicData"
            },
            "headers" : { }
          }
        }
      },
      "put" : {
        "tags" : [ "/user-shared-secrets" ],
        "summary" : "Generates a secret, replaces the old one with the new one if one already exists.",
        "operationId" : "generate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "object containing the user for which the secret must be generated",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "data object containing the secret",
            "schema" : {
              "$ref" : "#/definitions/SharedSecretData"
            },
            "headers" : { }
          }
        }
      },
      "delete" : {
        "tags" : [ "/user-shared-secrets" ],
        "summary" : "Deletes the secret for the user.",
        "operationId" : "deactivate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "object that specifies the user",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : { }
        }
      }
    },
    "/users" : {
      "get" : {
        "tags" : [ "/users" ],
        "summary" : "Find users specified by search criteria.",
        "operationId" : "findByCriteria",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "query",
          "description" : "search criteria",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "list of attribute search result objects",
            "schema" : {
              "$ref" : "#/definitions/FindUsersResponse"
            },
            "headers" : { }
          }
        }
      },
      "post" : {
        "tags" : [ "/users" ],
        "summary" : "Creates a primary user account for a user.",
        "operationId" : "create",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "the create request",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateUserRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "user data",
            "schema" : {
              "$ref" : "#/definitions/UserData"
            },
            "headers" : { }
          }
        }
      },
      "put" : {
        "tags" : [ "/users" ],
        "summary" : "Update specified user.",
        "operationId" : "update",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "the updateUserRequest",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdateUserRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the updated user",
            "schema" : {
              "$ref" : "#/definitions/UserData"
            },
            "headers" : { }
          }
        }
      }
    },
    "/users/external" : {
      "post" : {
        "tags" : [ "/users" ],
        "summary" : "Creates an external user account for an existing user.",
        "operationId" : "createExternal",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "the create external user request",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateExternalUserRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the external user data",
            "schema" : {
              "$ref" : "#/definitions/UserData"
            },
            "headers" : { }
          }
        }
      }
    },
    "/users/find-basic-data" : {
      "get" : {
        "tags" : [ "/users" ],
        "summary" : "Finds basic user data specified by search criteria.",
        "operationId" : "findBasicDataByCriteria",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "query",
          "description" : "search criteria",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "page of basic user data objects",
            "schema" : {
              "$ref" : "#/definitions/FindUserBasicDataResponse"
            },
            "headers" : { }
          }
        }
      }
    },
    "/users/force-password-change" : {
      "put" : {
        "tags" : [ "/users" ],
        "summary" : "",
        "operationId" : "forcePasswordChange",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ForcePasswordChangeRequest"
          }
        } ],
        "responses" : {
          "default" : { }
        },
        "deprecated" : true
      }
    },
    "/users/recover-password" : {
      "post" : {
        "tags" : [ "/users" ],
        "summary" : "Initiates a request to recover a user's password after it is say lost or forgotten.",
        "operationId" : "recoverPassword",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "the request to reset a password for a user",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RecoverPasswordRequest"
          }
        } ],
        "responses" : {
          "default" : { }
        }
      }
    },
    "/users/reset-password" : {
      "put" : {
        "tags" : [ "/users" ],
        "summary" : "Resets password for the specified user.",
        "operationId" : "resetPassword",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "for password change",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ResetUserPasswordRequest"
          }
        } ],
        "responses" : {
          "default" : { }
        }
      }
    },
    "/users/{username}" : {
      "get" : {
        "tags" : [ "/users" ],
        "summary" : "Get specified user.",
        "operationId" : "get",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "the user-identifying information",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "the user data",
            "schema" : {
              "$ref" : "#/definitions/UserData"
            },
            "headers" : { }
          }
        }
      },
      "delete" : {
        "tags" : [ "/users" ],
        "summary" : "Delete specified user.",
        "operationId" : "delete",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "the user-specifying information",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : { }
        }
      }
    }
  },
  "definitions" : {
    "UserIdData" : {
      "type" : "object",
      "required" : [ "username" ],
      "properties" : {
        "username" : {
          "type" : "string"
        }
      }
    },
    "GroupIdData" : {
      "type" : "object",
      "required" : [ "groupName" ],
      "properties" : {
        "groupName" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 100,
          "pattern" : "\\p{Alpha}\\w*"
        }
      }
    },
    "FindUserBasicDataResponse" : {
      "type" : "object",
      "properties" : {
        "lastPage" : {
          "type" : "boolean",
          "default" : false
        },
        "pageNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int64",
          "minimum" : 0.0
        },
        "totalResults" : {
          "type" : "integer",
          "format" : "int64",
          "minimum" : 0.0
        },
        "pageContent" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserBasicData"
          }
        }
      }
    },
    "AuthorizeMulitpleUnitsResponse" : {
      "type" : "object",
      "properties" : {
        "enterpriseUnits" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EnterpriseUnitIdData"
          }
        }
      }
    },
    "FindOrganizationsResponse" : {
      "type" : "object",
      "properties" : {
        "lastPage" : {
          "type" : "boolean",
          "default" : false
        },
        "pageNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int64",
          "minimum" : 0.0
        },
        "totalResults" : {
          "type" : "integer",
          "format" : "int64",
          "minimum" : 0.0
        },
        "pageContent" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OrganizationData"
          }
        }
      }
    },
    "EnterpriseTypeBasicData" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        }
      }
    },
    "UpdateEnterpriseUnitRequest" : {
      "type" : "object",
      "required" : [ "enterpriseUnitId", "name" ],
      "properties" : {
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "description" : {
          "type" : "string"
        },
        "enterpriseTypeName" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50,
          "pattern" : "\\p{Alnum}[\\w- ]*"
        },
        "parentId" : {
          "type" : "string"
        },
        "referenceId" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 100
        },
        "enterpriseUnitId" : {
          "type" : "string"
        }
      }
    },
    "ForcePasswordChangeRequest" : {
      "type" : "object",
      "required" : [ "username" ],
      "properties" : {
        "username" : {
          "type" : "string"
        }
      }
    },
    "UserSettingsData" : {
      "type" : "object",
      "required" : [ "configurationSetId", "configurationSettings", "username" ],
      "properties" : {
        "configurationSetId" : {
          "$ref" : "#/definitions/ConfigurationSetIdData"
        },
        "configurationSettings" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConfigurationSettingData"
          }
        },
        "username" : {
          "type" : "string"
        }
      }
    },
    "SharedSecretBasicData" : {
      "type" : "object",
      "required" : [ "username" ],
      "properties" : {
        "username" : {
          "type" : "string"
        },
        "timestamp" : {
          "type" : "string",
          "format" : "date-time"
        }
      }
    },
    "RoleData" : {
      "type" : "object",
      "required" : [ "roleName" ],
      "properties" : {
        "roleName" : {
          "type" : "string"
        },
        "category" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "impliedRoles" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RoleIdData"
          }
        }
      }
    },
    "ConfigurationFieldData" : {
      "type" : "object",
      "required" : [ "displayName", "fieldType", "name" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "allowedValues" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "defaultValue" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 512
        },
        "description" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string",
          "minLength" : 3,
          "maxLength" : 128,
          "pattern" : "\\p{Alpha}[\\w- ]*"
        },
        "fieldType" : {
          "type" : "string",
          "enum" : [ "ENUM", "STRING" ]
        },
        "regularExpression" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 256
        }
      }
    },
    "UpdateConfigurationFieldRequest" : {
      "type" : "object",
      "required" : [ "configurationSetId", "displayName", "fieldType", "name" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "allowedValues" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "defaultValue" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 512
        },
        "description" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string",
          "minLength" : 3,
          "maxLength" : 128,
          "pattern" : "\\p{Alpha}[\\w- ]*"
        },
        "fieldType" : {
          "type" : "string",
          "enum" : [ "ENUM", "STRING" ]
        },
        "regularExpression" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 256
        },
        "configurationSetId" : {
          "$ref" : "#/definitions/ConfigurationSetIdData"
        }
      }
    },
    "CreateEnterpriseTypeRequest" : {
      "type" : "object",
      "required" : [ "description", "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "description" : {
          "type" : "string"
        }
      }
    },
    "CreateConfigurationSetRequest" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "category" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "configurationFields" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConfigurationFieldData"
          }
        }
      }
    },
    "RoleBasicData" : {
      "type" : "object",
      "required" : [ "roleName" ],
      "properties" : {
        "roleName" : {
          "type" : "string"
        },
        "category" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        }
      }
    },
    "GrantRolesToGroupsRequest" : {
      "type" : "object",
      "required" : [ "groups", "roles" ],
      "properties" : {
        "roles" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RoleIdData"
          }
        },
        "groups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GroupIdData"
          }
        }
      }
    },
    "CreateEnterpriseUnitRequest" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "description" : {
          "type" : "string"
        },
        "enterpriseTypeName" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50,
          "pattern" : "\\p{Alnum}[\\w- ]*"
        },
        "parentId" : {
          "type" : "string"
        },
        "referenceId" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 100
        },
        "enterpriseUnitId" : {
          "type" : "string"
        }
      }
    },
    "AddConfigurationFieldRequest" : {
      "type" : "object",
      "required" : [ "configurationSetId", "displayName", "fieldType", "name" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "allowedValues" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "defaultValue" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 512
        },
        "description" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string",
          "minLength" : 3,
          "maxLength" : 128,
          "pattern" : "\\p{Alpha}[\\w- ]*"
        },
        "fieldType" : {
          "type" : "string",
          "enum" : [ "ENUM", "STRING" ]
        },
        "regularExpression" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 256
        },
        "configurationSetId" : {
          "$ref" : "#/definitions/ConfigurationSetIdData"
        }
      }
    },
    "GroupMembershipsResponse" : {
      "type" : "object",
      "required" : [ "username" ],
      "properties" : {
        "username" : {
          "type" : "string"
        },
        "memberships" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GroupIdData"
          }
        }
      }
    },
    "ConfigurationSetBasicViewData" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "category" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "inUse" : {
          "type" : "boolean",
          "default" : false
        },
        "locked" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "SetConfigurationSettingsRequest" : {
      "type" : "object",
      "required" : [ "configurationSetId", "configurationSettings" ],
      "properties" : {
        "configurationSetId" : {
          "$ref" : "#/definitions/ConfigurationSetIdData"
        },
        "configurationSettings" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConfigurationSettingData"
          }
        }
      }
    },
    "GrantRolesToOrganizationRequest" : {
      "type" : "object",
      "required" : [ "roles" ],
      "properties" : {
        "roles" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RoleIdData"
          }
        },
        "organizationName" : {
          "type" : "string"
        }
      }
    },
    "EnterpriseUnitBasicData" : {
      "type" : "object",
      "required" : [ "enterpriseUnitId", "name" ],
      "properties" : {
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "description" : {
          "type" : "string"
        },
        "enterpriseTypeName" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50,
          "pattern" : "\\p{Alnum}[\\w- ]*"
        },
        "parentId" : {
          "type" : "string"
        },
        "referenceId" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 100
        },
        "enterpriseUnitId" : {
          "type" : "string"
        }
      }
    },
    "ConfigurationSettingData" : {
      "type" : "object",
      "required" : [ "key" ],
      "properties" : {
        "key" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 512
        }
      }
    },
    "AddMembersRequest" : {
      "type" : "object",
      "required" : [ "groupName", "members" ],
      "properties" : {
        "groupName" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 100,
          "pattern" : "\\p{Alpha}\\w*"
        },
        "members" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserIdData"
          }
        }
      }
    },
    "SetEnterpriseSettingsRequest" : {
      "type" : "object",
      "required" : [ "configurationSetId", "configurationSettings", "enterpriseUnitId" ],
      "properties" : {
        "configurationSetId" : {
          "$ref" : "#/definitions/ConfigurationSetIdData"
        },
        "configurationSettings" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConfigurationSettingData"
          }
        },
        "enterpriseUnitId" : {
          "type" : "string"
        }
      }
    },
    "RevokeRolesFromGroupsRequest" : {
      "type" : "object",
      "required" : [ "groups", "roles" ],
      "properties" : {
        "roles" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RoleIdData"
          }
        },
        "groups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GroupIdData"
          }
        }
      }
    },
    "ConfigurationSetViewData" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "category" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "inUse" : {
          "type" : "boolean",
          "default" : false
        },
        "locked" : {
          "type" : "boolean",
          "default" : false
        },
        "configurationFields" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConfigurationFieldData"
          }
        }
      }
    },
    "RoleIdData" : {
      "type" : "object",
      "required" : [ "roleName" ],
      "properties" : {
        "roleName" : {
          "type" : "string"
        }
      }
    },
    "GrantUnitToUserRequest" : {
      "type" : "object",
      "required" : [ "enterpriseUnitId", "username" ],
      "properties" : {
        "enterpriseUnitId" : {
          "type" : "string"
        },
        "username" : {
          "type" : "string"
        }
      }
    },
    "AuthorizeMultipleUnitsRequest" : {
      "type" : "object",
      "required" : [ "enterpriseUnits" ],
      "properties" : {
        "enterpriseUnits" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EnterpriseUnitIdData"
          }
        },
        "roleName" : {
          "type" : "string"
        }
      }
    },
    "RemoveMembersRequest" : {
      "type" : "object",
      "required" : [ "groupName", "members" ],
      "properties" : {
        "groupName" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 100,
          "pattern" : "\\p{Alpha}\\w*"
        },
        "members" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserIdData"
          }
        }
      }
    },
    "OrganizationData" : {
      "type" : "object",
      "required" : [ "organizationName" ],
      "properties" : {
        "organizationName" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        }
      }
    },
    "FindGroupsResponse" : {
      "type" : "object",
      "properties" : {
        "lastPage" : {
          "type" : "boolean",
          "default" : false
        },
        "pageNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int64",
          "minimum" : 0.0
        },
        "totalResults" : {
          "type" : "integer",
          "format" : "int64",
          "minimum" : 0.0
        },
        "pageContent" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GroupData"
          }
        }
      }
    },
    "ValidatePasswordRequest" : {
      "type" : "object",
      "required" : [ "password" ],
      "properties" : {
        "password" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 256,
          "pattern" : "[\\p{Graph}]*"
        }
      }
    },
    "FindEnterpriseUnitIdsResponse" : {
      "type" : "object",
      "properties" : {
        "lastPage" : {
          "type" : "boolean",
          "default" : false
        },
        "pageNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int64",
          "minimum" : 0.0
        },
        "totalResults" : {
          "type" : "integer",
          "format" : "int64",
          "minimum" : 0.0
        },
        "pageContent" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EnterpriseUnitIdData"
          }
        }
      }
    },
    "FindUsersResponse" : {
      "type" : "object",
      "properties" : {
        "lastPage" : {
          "type" : "boolean",
          "default" : false
        },
        "pageNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int64",
          "minimum" : 0.0
        },
        "totalResults" : {
          "type" : "integer",
          "format" : "int64",
          "minimum" : 0.0
        },
        "pageContent" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserData"
          }
        }
      }
    },
    "UserBasicData" : {
      "type" : "object",
      "required" : [ "status", "username" ],
      "properties" : {
        "username" : {
          "type" : "string"
        },
        "familyName" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 512
        },
        "fullName" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 2048
        },
        "givenName" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 512
        },
        "status" : {
          "type" : "string",
          "enum" : [ "ACTIVE", "DELETED", "INACTIVE" ]
        }
      }
    },
    "RecoverPasswordRequest" : {
      "type" : "object",
      "required" : [ "resetUrl" ],
      "properties" : {
        "resetUrl" : {
          "type" : "string"
        },
        "tokenParam" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 128,
          "pattern" : "[\\w\\-]+"
        }
      }
    },
    "GroupData" : {
      "type" : "object",
      "required" : [ "groupName" ],
      "properties" : {
        "groupName" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 100,
          "pattern" : "\\p{Alpha}\\w*"
        },
        "description" : {
          "type" : "string"
        }
      }
    },
    "AccessKeyBasicData" : {
      "type" : "object",
      "required" : [ "creationTimestamp", "sharedKey", "userId" ],
      "properties" : {
        "sharedKey" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "creationTimestamp" : {
          "type" : "string",
          "format" : "date-time"
        },
        "deactivationTimestamp" : {
          "type" : "string",
          "format" : "date-time"
        },
        "userId" : {
          "$ref" : "#/definitions/UserIdData"
        }
      }
    },
    "FindRolesResponse" : {
      "type" : "object",
      "properties" : {
        "lastPage" : {
          "type" : "boolean",
          "default" : false
        },
        "pageNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int64",
          "minimum" : 0.0
        },
        "totalResults" : {
          "type" : "integer",
          "format" : "int64",
          "minimum" : 0.0
        },
        "pageContent" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RoleBasicData"
          }
        }
      }
    },
    "CreateRoleRequest" : {
      "type" : "object",
      "required" : [ "roleName" ],
      "properties" : {
        "roleName" : {
          "type" : "string"
        },
        "category" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "impliedRoles" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RoleIdData"
          }
        }
      }
    },
    "CreateGroupRequest" : {
      "type" : "object",
      "required" : [ "groupName" ],
      "properties" : {
        "groupName" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 100,
          "pattern" : "\\p{Alpha}\\w*"
        },
        "description" : {
          "type" : "string"
        }
      }
    },
    "UpdateEnterpriseTypeRequest" : {
      "type" : "object",
      "required" : [ "description", "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "description" : {
          "type" : "string"
        }
      }
    },
    "EnterpriseUnitData" : {
      "type" : "object",
      "required" : [ "enterpriseUnitId", "name" ],
      "properties" : {
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "description" : {
          "type" : "string"
        },
        "enterpriseTypeName" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50,
          "pattern" : "\\p{Alnum}[\\w- ]*"
        },
        "parentId" : {
          "type" : "string"
        },
        "referenceId" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 100
        },
        "enterpriseUnitId" : {
          "type" : "string"
        }
      }
    },
    "CreateOrganizationRequest" : {
      "type" : "object",
      "required" : [ "name", "parentOrganizationName" ],
      "properties" : {
        "description" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 32,
          "pattern" : "[\\w-]+"
        },
        "parentOrganizationName" : {
          "type" : "string"
        },
        "organizationName" : {
          "type" : "string"
        }
      }
    },
    "CreateUserRequest" : {
      "type" : "object",
      "required" : [ "status", "username" ],
      "properties" : {
        "username" : {
          "type" : "string"
        },
        "familyName" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 512
        },
        "fullName" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 2048
        },
        "givenName" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 512
        },
        "status" : {
          "type" : "string",
          "enum" : [ "ACTIVE", "DELETED", "INACTIVE" ]
        },
        "address" : {
          "$ref" : "#/definitions/AddressData"
        },
        "email" : {
          "type" : "string"
        },
        "telephoneNumber" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 32,
          "pattern" : "\\+?(\\d|\\()[\\d-\\(\\) ]*\\d"
        },
        "forcePasswordChange" : {
          "type" : "boolean",
          "default" : false
        },
        "password" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 256,
          "pattern" : "[\\p{Graph}]*"
        }
      }
    },
    "UpdateUserRequest" : {
      "type" : "object",
      "required" : [ "status", "username" ],
      "properties" : {
        "username" : {
          "type" : "string"
        },
        "familyName" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 512
        },
        "fullName" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 2048
        },
        "givenName" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 512
        },
        "status" : {
          "type" : "string",
          "enum" : [ "ACTIVE", "DELETED", "INACTIVE" ]
        },
        "address" : {
          "$ref" : "#/definitions/AddressData"
        },
        "email" : {
          "type" : "string"
        },
        "telephoneNumber" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 32,
          "pattern" : "\\+?(\\d|\\()[\\d-\\(\\) ]*\\d"
        }
      }
    },
    "ResetUserPasswordRequest" : {
      "type" : "object",
      "required" : [ "password", "username" ],
      "properties" : {
        "username" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 256,
          "pattern" : "[\\p{Graph}]*"
        }
      }
    },
    "FindGroupIdsResponse" : {
      "type" : "object",
      "properties" : {
        "lastPage" : {
          "type" : "boolean",
          "default" : false
        },
        "pageNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int64",
          "minimum" : 0.0
        },
        "totalResults" : {
          "type" : "integer",
          "format" : "int64",
          "minimum" : 0.0
        },
        "pageContent" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GroupIdData"
          }
        }
      }
    },
    "ConfigurationSettingsData" : {
      "type" : "object",
      "required" : [ "configurationSetId", "configurationSettings" ],
      "properties" : {
        "configurationSetId" : {
          "$ref" : "#/definitions/ConfigurationSetIdData"
        },
        "configurationSettings" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConfigurationSettingData"
          }
        }
      }
    },
    "UserData" : {
      "type" : "object",
      "required" : [ "status", "username" ],
      "properties" : {
        "username" : {
          "type" : "string"
        },
        "familyName" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 512
        },
        "fullName" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 2048
        },
        "givenName" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 512
        },
        "status" : {
          "type" : "string",
          "enum" : [ "ACTIVE", "DELETED", "INACTIVE" ]
        },
        "address" : {
          "$ref" : "#/definitions/AddressData"
        },
        "email" : {
          "type" : "string"
        },
        "telephoneNumber" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 32,
          "pattern" : "\\+?(\\d|\\()[\\d-\\(\\) ]*\\d"
        },
        "primary" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "EnterpriseUnitReadData" : {
      "type" : "object",
      "required" : [ "enterpriseUnitId", "name" ],
      "properties" : {
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "description" : {
          "type" : "string"
        },
        "enterpriseTypeName" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50,
          "pattern" : "\\p{Alnum}[\\w- ]*"
        },
        "parentId" : {
          "type" : "string"
        },
        "referenceId" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 100
        },
        "enterpriseUnitId" : {
          "type" : "string"
        },
        "level" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "FindEnterpriseUnitsResponse" : {
      "type" : "object",
      "properties" : {
        "lastPage" : {
          "type" : "boolean",
          "default" : false
        },
        "pageNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int64",
          "minimum" : 0.0
        },
        "totalResults" : {
          "type" : "integer",
          "format" : "int64",
          "minimum" : 0.0
        },
        "pageContent" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EnterpriseUnitReadData"
          }
        }
      }
    },
    "GrantRolesToUsersRequest" : {
      "type" : "object",
      "required" : [ "roles", "users" ],
      "properties" : {
        "roles" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RoleIdData"
          }
        },
        "users" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserIdData"
          }
        }
      }
    },
    "UserGrantData" : {
      "type" : "object",
      "required" : [ "enterpriseUnitId", "username" ],
      "properties" : {
        "enterpriseUnitId" : {
          "type" : "string"
        },
        "username" : {
          "type" : "string"
        }
      }
    },
    "SetUserSettingsRequest" : {
      "type" : "object",
      "required" : [ "configurationSetId", "configurationSettings", "username" ],
      "properties" : {
        "configurationSetId" : {
          "$ref" : "#/definitions/ConfigurationSetIdData"
        },
        "configurationSettings" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConfigurationSettingData"
          }
        },
        "username" : {
          "type" : "string"
        }
      }
    },
    "UpdateGroupRequest" : {
      "type" : "object",
      "required" : [ "groupName" ],
      "properties" : {
        "groupName" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 100,
          "pattern" : "\\p{Alpha}\\w*"
        },
        "description" : {
          "type" : "string"
        }
      }
    },
    "ChangePasswordRequest" : {
      "type" : "object",
      "required" : [ "newPassword" ],
      "properties" : {
        "newPassword" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 256,
          "pattern" : "[\\p{Graph}]*"
        }
      }
    },
    "FindUserIdsResponse" : {
      "type" : "object",
      "properties" : {
        "lastPage" : {
          "type" : "boolean",
          "default" : false
        },
        "pageNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int64",
          "minimum" : 0.0
        },
        "totalResults" : {
          "type" : "integer",
          "format" : "int64",
          "minimum" : 0.0
        },
        "pageContent" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserIdData"
          }
        }
      }
    },
    "EnterpriseUnitBasicDataListResponse" : {
      "type" : "object",
      "properties" : {
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EnterpriseUnitBasicData"
          }
        }
      }
    },
    "UpdateRoleRequest" : {
      "type" : "object",
      "required" : [ "roleName" ],
      "properties" : {
        "roleName" : {
          "type" : "string"
        },
        "category" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "impliedRoles" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RoleIdData"
          }
        }
      }
    },
    "AddressData" : {
      "type" : "object",
      "properties" : {
        "city" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 128,
          "pattern" : "\\p{Alpha}[\\p{Alpha}'-\\., ]*"
        },
        "country" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 128,
          "pattern" : "\\p{Alpha}[\\p{Alpha}'-\\., ]*"
        },
        "postalCode" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 64,
          "pattern" : "[\\p{Alnum}- ]*"
        },
        "state" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 128,
          "pattern" : "\\p{Alpha}[\\p{Alpha}'-\\., ]*"
        },
        "street" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 128
        }
      }
    },
    "AccessKeyData" : {
      "type" : "object",
      "required" : [ "creationTimestamp", "secretKey", "sharedKey", "userId" ],
      "properties" : {
        "sharedKey" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "creationTimestamp" : {
          "type" : "string",
          "format" : "date-time"
        },
        "deactivationTimestamp" : {
          "type" : "string",
          "format" : "date-time"
        },
        "userId" : {
          "$ref" : "#/definitions/UserIdData"
        },
        "secretKey" : {
          "type" : "string",
          "minLength" : 32,
          "maxLength" : 32
        }
      }
    },
    "EnterpriseTypeData" : {
      "type" : "object",
      "required" : [ "description", "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "description" : {
          "type" : "string"
        }
      }
    },
    "SharedSecretData" : {
      "type" : "object",
      "required" : [ "sharedSecret", "sharedSecretUri", "username" ],
      "properties" : {
        "username" : {
          "type" : "string"
        },
        "timestamp" : {
          "type" : "string",
          "format" : "date-time"
        },
        "sharedSecret" : {
          "type" : "string"
        },
        "sharedSecretUri" : {
          "type" : "string"
        }
      }
    },
    "FindConfigurationSetResponse" : {
      "type" : "object",
      "properties" : {
        "lastPage" : {
          "type" : "boolean",
          "default" : false
        },
        "pageNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int64",
          "minimum" : 0.0
        },
        "totalResults" : {
          "type" : "integer",
          "format" : "int64",
          "minimum" : 0.0
        },
        "pageContent" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConfigurationSetBasicViewData"
          }
        }
      }
    },
    "SaveUserPasswordRequest" : {
      "type" : "object",
      "required" : [ "password" ],
      "properties" : {
        "password" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 256,
          "pattern" : "[\\p{Graph}]*"
        }
      }
    },
    "CreateExternalUserRequest" : {
      "type" : "object",
      "required" : [ "status", "username" ],
      "properties" : {
        "username" : {
          "type" : "string"
        },
        "familyName" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 512
        },
        "fullName" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 2048
        },
        "givenName" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 512
        },
        "status" : {
          "type" : "string",
          "enum" : [ "ACTIVE", "DELETED", "INACTIVE" ]
        },
        "address" : {
          "$ref" : "#/definitions/AddressData"
        },
        "email" : {
          "type" : "string"
        },
        "telephoneNumber" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 32,
          "pattern" : "\\+?(\\d|\\()[\\d-\\(\\) ]*\\d"
        }
      }
    },
    "SetAuthenticatedUserSettingsRequest" : {
      "type" : "object",
      "required" : [ "configurationSetId", "configurationSettings" ],
      "properties" : {
        "configurationSetId" : {
          "$ref" : "#/definitions/ConfigurationSetIdData"
        },
        "configurationSettings" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConfigurationSettingData"
          }
        }
      }
    },
    "GroupMembersResponse" : {
      "type" : "object",
      "required" : [ "groupName" ],
      "properties" : {
        "groupName" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 100,
          "pattern" : "\\p{Alpha}\\w*"
        },
        "members" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserIdData"
          }
        }
      }
    },
    "UpdateConfigurationSetRequest" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "category" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        }
      }
    },
    "ConfigurationSetIdData" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        }
      }
    },
    "EnterpriseUnitReadDataListResponse" : {
      "type" : "object",
      "properties" : {
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EnterpriseUnitReadData"
          }
        }
      }
    },
    "RoleBasicDataListResponse" : {
      "type" : "object",
      "properties" : {
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RoleBasicData"
          }
        }
      }
    },
    "OrganizationIdData" : {
      "type" : "object",
      "required" : [ "organizationName" ],
      "properties" : {
        "organizationName" : {
          "type" : "string"
        }
      }
    },
    "FullRoleData" : {
      "type" : "object",
      "required" : [ "roles" ],
      "properties" : {
        "roles" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RoleData"
          }
        }
      }
    },
    "EnterpriseSettingsData" : {
      "type" : "object",
      "required" : [ "configurationSetId", "configurationSettings", "enterpriseUnitId" ],
      "properties" : {
        "configurationSetId" : {
          "$ref" : "#/definitions/ConfigurationSetIdData"
        },
        "configurationSettings" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConfigurationSettingData"
          }
        },
        "enterpriseUnitId" : {
          "type" : "string"
        }
      }
    },
    "FindUserGrantsResponse" : {
      "type" : "object",
      "properties" : {
        "lastPage" : {
          "type" : "boolean",
          "default" : false
        },
        "pageNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int64",
          "minimum" : 0.0
        },
        "totalResults" : {
          "type" : "integer",
          "format" : "int64",
          "minimum" : 0.0
        },
        "pageContent" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserGrantData"
          }
        }
      }
    },
    "CreateAccessKeyRequest" : {
      "type" : "object",
      "required" : [ "userId" ],
      "properties" : {
        "userId" : {
          "$ref" : "#/definitions/UserIdData"
        }
      }
    },
    "RoleIdListResponse" : {
      "type" : "object",
      "properties" : {
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RoleIdData"
          }
        }
      }
    },
    "EnterpriseTypeBasicDataListResponse" : {
      "type" : "object",
      "properties" : {
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EnterpriseTypeBasicData"
          }
        }
      }
    },
    "EnterpriseUnitIdData" : {
      "type" : "object",
      "required" : [ "enterpriseUnitId" ],
      "properties" : {
        "enterpriseUnitId" : {
          "type" : "string"
        }
      }
    },
    "FindAccessKeysResponse" : {
      "type" : "object",
      "properties" : {
        "lastPage" : {
          "type" : "boolean",
          "default" : false
        },
        "pageNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int64",
          "minimum" : 0.0
        },
        "totalResults" : {
          "type" : "integer",
          "format" : "int64",
          "minimum" : 0.0
        },
        "pageContent" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AccessKeyBasicData"
          }
        }
      }
    },
    "EnterpriseUnitIdDataListResponse" : {
      "type" : "object",
      "properties" : {
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EnterpriseUnitIdData"
          }
        }
      }
    },
    "UpdateOrganizationRequest" : {
      "type" : "object",
      "required" : [ "organizationName" ],
      "properties" : {
        "organizationName" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        }
      }
    },
    "AuthorizationProviderRequest" : {
      "type" : "object",
      "required" : [ "username" ],
      "properties" : {
        "username" : {
          "type" : "string"
        },
        "headers" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/KeyValueData"
          }
        }
      }
    },
    "RevokeRolesFromUsersRequest" : {
      "type" : "object",
      "required" : [ "roles", "users" ],
      "properties" : {
        "roles" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RoleIdData"
          }
        },
        "users" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserIdData"
          }
        }
      }
    },
    "RevokeRolesFromOrganizationRequest" : {
      "type" : "object",
      "required" : [ "roles" ],
      "properties" : {
        "roles" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RoleIdData"
          }
        },
        "organizationName" : {
          "type" : "string"
        }
      }
    },
    "SaveFullRoleGraphRequest" : {
      "type" : "object",
      "required" : [ "roles" ],
      "properties" : {
        "roles" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RoleData"
          }
        }
      }
    },
    "SecurityTokenData" : {
      "type" : "object",
      "required" : [ "authenticationMethods", "maxIdleTime", "maxSessionTime", "organizationName", "remainingTime", "token", "username" ],
      "properties" : {
        "token" : {
          "type" : "string"
        },
        "maxIdleTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "maxSessionTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "remainingTime" : {
          "type" : "integer",
          "format" : "int64",
          "minimum" : 0.0
        },
        "authorities" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "credentialsExpired" : {
          "type" : "boolean",
          "default" : false
        },
        "organizationName" : {
          "type" : "string"
        },
        "username" : {
          "type" : "string"
        },
        "authenticationMethods" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "exchangesCompleted" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "KeyValueData" : {
      "type" : "object",
      "required" : [ "key" ],
      "properties" : {
        "key" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 512
        }
      }
    }
  }
}